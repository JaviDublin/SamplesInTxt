references
adodb    => embeded interop types = false
Microsoft.CSharp
Office Core
Office Interop.Excel
System.Drawing


public class FileController
    {
        public static string GetFileName()
        {
            string file_name = "TyreAdjustment" + "_" + DateTime.Now.ToString("dd-MM-yyyy_HH-mm-ss") + ".xlsx";
            return file_name;
        }
    }




using ADODB;

namespace ST_8c6b7e72e8404c97a5faade110475025
{
    public class FileQueryHandler
    {
        public string FilePath { get; set; }

        public Recordset Recordset { get; set; }

        public string CommandText { get; set; }
    }
}


public interface IFileWriter
    {
        void ExportRecordsetToExcel(FileQueryHandler query);
    }


    public class FileWriter : IFileWriter
    {
        Functions InsFunctions;
        public FileWriter()
        {
            InsFunctions = new Functions();
        }

        public void ExportRecordsetToExcel(FileQueryHandler query)
        {
            Functions InsFunctions = new Functions();
            Microsoft.Office.Interop.Excel.Application oXL;
            Microsoft.Office.Interop.Excel.Workbook oWB;
            Microsoft.Office.Interop.Excel.Worksheet oSheet;

            oXL = new Microsoft.Office.Interop.Excel.Application();

            oWB = oXL.Workbooks.Add();
            oSheet = oWB.Worksheets[1];
            oSheet.Activate();

            int totalColumns = query.Recordset.Fields.Count;
            int totalRows = query.Recordset.RecordCount;

            oSheet.Cells.Font.Size = 10;
            oSheet.Cells.Font.Name = "Arial";

            for (int n = 1; n <= totalColumns; n++)
            {
                oSheet.Cells[1, n].Value = query.Recordset.Fields[n - 1].Name;
                InsFunctions.FormatCellHeaders(oSheet.Range[oSheet.Cells[1, n], oSheet.Cells[1, n]], false);
                //Apply Header Merrion Template
            }

            oSheet.Range["1:1"].RowHeight = 50.25;

            oSheet.Range["A2"].CopyFromRecordset(query.Recordset);

            ////apply merrion format to the details files
            if ((totalRows > 0) && (totalColumns > 0))
            {
                InsFunctions.ApplyOutandInnerBorders(oSheet.Range[oSheet.Cells[2, 1], oSheet.Cells[totalRows + 1, totalColumns]]);

                oSheet.Name = "Errors";

                Microsoft.Office.Interop.Excel.Range firstRow = (Microsoft.Office.Interop.Excel.Range)oSheet.Rows[1];
                firstRow.Activate();
                firstRow.Select();
                firstRow.AutoFilter(1, Type.Missing, Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, Type.Missing, true);

                //Apply more Merrion Templates 
                oSheet.Cells.Select();
                oSheet.Range["A1"].EntireColumn.WrapText = true;
                oSheet.Cells.EntireColumn.AutoFit();
                oSheet.Range["A1"].EntireColumn.ColumnWidth = 75;
                oSheet.Cells.EntireRow.AutoFit();
                oSheet.Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
                oSheet.Cells.VerticalAlignment = Microsoft.Office.Interop.Excel.XlVAlign.xlVAlignCenter;
                oSheet.Range["A1"].Select();

                //oSheet = oWB.Worksheets[1];
                //oSheet.Activate();
                oXL.DisplayAlerts = false;

                //string sFileName = Path.GetDirectoryName(query.FilePath) + "\\" + FileController.GetFileName();
                string sFileName = query.FilePath;
                oWB.SaveAs(Filename: sFileName, FileFormat: Microsoft.Office.Interop.Excel.XlFileFormat.xlOpenXMLWorkbook);
                //oXL.Visible = true;
                //oXL.UserControl = true;
                oWB.Close();
                oXL.Quit();

                oSheet = null;
                oXL = null;
                oWB = null;
            
		} // if


        } // method


    }  //class



using Microsoft.Office.Interop.Excel;
using System;
using System.Drawing;

 public class Functions
    {
        public void FormatCellHeaders(Range oRange, bool WrapText, int iFontSize = 14)
        {
            oRange.Font.Bold = true;
            oRange.Font.Color = Color.White;
            oRange.Font.Size = iFontSize;
            oRange.Font.Name = "Arial";
            oRange.BorderAround2(XlLineStyle.xlContinuous, XlBorderWeight.xlThin, XlColorIndex.xlColorIndexAutomatic);
            oRange.WrapText = WrapText;
            oRange.Interior.Pattern = XlPattern.xlPatternSolid;
            oRange.Interior.PatternColorIndex = XlColorIndex.xlColorIndexAutomatic;
            oRange.Interior.Color = XlRgbColor.rgbDarkBlue;
            oRange.Interior.TintAndShade = 0;
            oRange.Interior.PatternTintAndShade = 0;
            if (oRange.Count == 1)
            {
                if (Convert.ToString(oRange.Value) == "Registration")
                    oRange.ColumnWidth = 18;
            }
        }

        public void ApplyOutandInnerBorders(Range oRange)
        {
            oRange.RowHeight = 12.75;
            oRange.BorderAround2(XlLineStyle.xlContinuous, XlBorderWeight.xlThin, XlColorIndex.xlColorIndexAutomatic);

            oRange.Borders.LineStyle = XlLineStyle.xlContinuous;
            oRange.Borders.Weight = XlBorderWeight.xlThin;
            oRange.Borders.ColorIndex = XlColorIndex.xlColorIndexAutomatic;
        }

        public void ApplyLongDateTimeFormat(Range oRange)
        {
            oRange.NumberFormat = "dd-MMM-yy HH:mm:ss";
        }
    }





public void Main()
		{
            // TODO: Add your code here

            string strDestinationPath = Path.GetDirectoryName(Dts.Variables["FileName"].Value.ToString()) + "\\" + FileController.GetFileName(); ;
            Dts.Variables["Attachment"].Value = strDestinationPath;
            Recordset Rs = new Recordset();
            Rs.CursorLocation = CursorLocationEnum.adUseClient;
            Rs.CursorType = CursorTypeEnum.adOpenStatic;
            Rs.LockType = LockTypeEnum.adLockReadOnly;
            Rs = (Recordset)Dts.Variables["Resultset"].Value;

            if (Rs.RecordCount > 0)
            {
                var query = new FileQueryHandler()
                {
                    FilePath = strDestinationPath,
                    Recordset = Rs


                };
                IFileWriter fileWriter = new FileWriter();
                fileWriter.ExportRecordsetToExcel(query);

                Dts.Variables["RsHasData"].Value = true;
            }
            
            

            Dts.TaskResult = (int)ScriptResults.Success;
		}





iRecordCount
iRecordCountMileage

RsOutput
RsOutputMileage



-- Multiple Active Sheets


public void Main()
		{
            
            int iRows = 0;
            ADODB.Recordset Rs = new ADODB.Recordset();
            Rs.CursorLocation = CursorLocationEnum.adUseClient;
            Rs.CursorType = CursorTypeEnum.adOpenStatic;
            Rs.LockType = LockTypeEnum.adLockReadOnly;
            Microsoft.Office.Interop.Excel.Application oXL;
            Microsoft.Office.Interop.Excel.Workbook oWB;

            oXL = new Microsoft.Office.Interop.Excel.Application();

            //' Get a new workbook.
            string strFilePath = Dts.Variables["VarFileDefaultName"].Value.ToString(); 
		-- \\ie-mf-sql-live\z$\SSIS Temp Files\BI176 Services Provided Report\Service Provided Report Template New.xlsx
            string strDestinationPath = Dts.Variables["VarInitialDir"].Value.ToString(); 
		-- \\ie-mf-sql-live\z$\SSIS Temp Files\BI176 Services Provided Report\

		--\\183.2.0.51\Z$\SSIS Temp Files\BI558 - Aramark Implementation Report\AramarkImplementation_DATE.xlsx

            oWB = oXL.Workbooks.Open(strFilePath);

            iRows = (int)Dts.Variables["RowCountTerminatedTollsVehicles"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsTerminatedTollsVehicles"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Terminated Contracts Toll Tags");
            }
            else
            {
                oWB.Worksheets["Terminated Contracts Toll Tags"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountTerminatedTelematicsVehicles"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsTerminatedTelematicsVehicles"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Terminated Contracts Telematics");
            }
            else
            {
                oWB.Worksheets["Terminated Contracts Telematics"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountTerminatedFuelVehicles"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsTerminatedFuelVehicles"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Terminated Contracts Fuel Cards");
            }
            else
            {
                oWB.Worksheets["Terminated Contracts Fuel Cards"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountRentalClosedWithTolls"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsRentalClosedWithTolls"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Closed Rental With Toll Tags");
            }
            else
            {
                oWB.Worksheets["Closed Rental With Toll Tags"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountRentalClosedWithNonManagedTolls"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsRentalClosedWithNonManagedTolls"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Closed Rentals Non Managed Tags");
            }
            else
            {
                oWB.Worksheets["Closed Rentals Non Managed Tags"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountDriversMarkedAsLeftWithFuelCards"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsDriversMarkedAsLeftWithFuelCards"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Left Driver With Fuel Cards");
            }
            else
            {
                oWB.Worksheets["Left Driver With Fuel Cards"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountNewVehicles"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsNewVehicles"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "New Vehicles");
            }
            else
            {
                oWB.Worksheets["New Vehicles"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountIncorrectMultipleAllocations"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsIncorrectMultipleAllocations"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Incorrect Multiple Allocations");
            }
            else
            {
                oWB.Worksheets["Incorrect Multiple Allocations"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountNewDrivers"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsNewDrivers"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "New Drivers");
            }
            else
            {
                oWB.Worksheets["New Drivers"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountDriverDetails"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsDriverDetails"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Drivers Details");
            }
            else
            {
                oWB.Worksheets["Drivers Details"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountTollsRentalsNoDriver"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsTollsRentalsNoDriver"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "MFM Rental no cust-driver Tag");
            }
            else
            {
                oWB.Worksheets["MFM Rental no cust-driver Tag"].Delete();
            }


            iRows = (int)Dts.Variables["RowCountPoliciesThatDueToExpires"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsPoliciesThatDueToExpires"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Policies Due To Expire");
            }
            else
            {
                oWB.Worksheets["Policies Due To Expire"].Delete();
            }


            iRows = (int)Dts.Variables["RowCountBocRentals"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsBocRentals"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "BOC Opened Rentals");
            }
            else
            {
                oWB.Worksheets["BOC Opened Rentals"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountWallsRentals"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsWallsRentals"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "WALLS Opened Rentals");
            }
            else
            {
                oWB.Worksheets["WALLS Opened Rentals"].Delete();
            }


            iRows = (int)Dts.Variables["RowCountVehicleFuelCardsToBeCancelled"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsFuelCardsToBeCancelled"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Fuel Card To Be Cancelled");
            }
            else
            {
                oWB.Worksheets["Fuel Card To Be Cancelled"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountWriteOffRFL"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsWriteOffRFL"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Write Off Vehicles RFL");
            }
            else
            {
                oWB.Worksheets["Write Off Vehicles RFL"].Delete();
            }
            

            oXL.DisplayAlerts = false;
            string strFileName = DateTime.Now.ToString("yyyyMMdd") + " Service Provided Report.xlsx";
            Dts.Variables["User::VarDestinationFile"].Value = strDestinationPath + strFileName;
            oWB.SaveAs(strDestinationPath + strFileName, FileFormat: Microsoft.Office.Interop.Excel.XlFileFormat.xlOpenXMLWorkbook);

            oWB.Close();
            oXL.Quit();

            oXL = null;
            oWB = null;

			Dts.TaskResult = (int)ScriptResults.Success;
		}



SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Terminated Contracts Toll Tags");

        private void SendToExcel(ADODB.Recordset Rs, Int32 TotalRow, Int32 TotalColumn, Microsoft.Office.Interop.Excel.Application oXL, Microsoft.Office.Interop.Excel.Workbook oWB,string sWorkSheetName)
        {
            Microsoft.Office.Interop.Excel.Worksheet oSheet;

            oSheet = oWB.Worksheets[sWorkSheetName];
            oSheet.Activate();

            oSheet.Cells.Font.Size = 10;
            oSheet.Cells.Font.Name = "Arial";

            for (Int32 n = 1; n <= TotalColumn; n++)
            {
                oSheet.Cells[1, n].Value = Rs.Fields[n - 1].Name;
                InsFunctions.FormatCellHeaders(oSheet.Range[oSheet.Cells[1, n], oSheet.Cells[1, n]], false);
                //Apply Header Merrion Template
            }

            oSheet.Range["A2"].CopyFromRecordset(Rs);

            ////apply merrion format to the details files
            if ((TotalRow > 0) && (TotalColumn > 0))
            {
                ////apply merrion format to the details files
                InsFunctions.ApplyOutandInnerBorders(oSheet.Range[oSheet.Cells[2, 1], oSheet.Cells[TotalRow + 1, TotalColumn]]);
            }

            Microsoft.Office.Interop.Excel.Range firstRow = (Microsoft.Office.Interop.Excel.Range)oSheet.Rows[1];
            firstRow.Activate();
            firstRow.Select();
            firstRow.AutoFilter(1, Type.Missing, Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, Type.Missing, true);

            //Apply more Merrion Templates 
            oSheet.Cells.Select();
            oSheet.Cells.EntireColumn.AutoFit();
            oSheet.Cells.EntireRow.AutoFit();
            oSheet.Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            oSheet.Cells.VerticalAlignment = Microsoft.Office.Interop.Excel.XlVAlign.xlVAlignCenter;
            oSheet.Range["A1"].Select();
            //Apply more Merrion Templates

            oSheet = null;
        }





--====================================================================================================================
--====================================================================================================================
--====================================================================================================================
--====================================================================================================================
BI176 - Services Provice Report
Multiple Recordsets into one Excel file



public void Main()
		{
            
            int iRows = 0;
            ADODB.Recordset Rs = new ADODB.Recordset();
            Rs.CursorLocation = CursorLocationEnum.adUseClient;
            Rs.CursorType = CursorTypeEnum.adOpenStatic;
            Rs.LockType = LockTypeEnum.adLockReadOnly;
            Microsoft.Office.Interop.Excel.Application oXL;
            Microsoft.Office.Interop.Excel.Workbook oWB;

            oXL = new Microsoft.Office.Interop.Excel.Application();

            //' Get a new workbook.
            string strFilePath = Dts.Variables["VarFileDefaultName"].Value.ToString();
            string strDestinationPath = Dts.Variables["VarInitialDir"].Value.ToString(); 

            oWB = oXL.Workbooks.Open(strFilePath);

            iRows = (int)Dts.Variables["RowCountTerminatedTollsVehicles"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsTerminatedTollsVehicles"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Terminated Contracts Toll Tags");
            }
            else
            {
                oWB.Worksheets["Terminated Contracts Toll Tags"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountTerminatedTelematicsVehicles"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsTerminatedTelematicsVehicles"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Terminated Contracts Telematics");
            }
            else
            {
                oWB.Worksheets["Terminated Contracts Telematics"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountTerminatedFuelVehicles"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsTerminatedFuelVehicles"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Terminated Contracts Fuel Cards");
            }
            else
            {
                oWB.Worksheets["Terminated Contracts Fuel Cards"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountRentalClosedWithTolls"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsRentalClosedWithTolls"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Closed Rental With Toll Tags");
            }
            else
            {
                oWB.Worksheets["Closed Rental With Toll Tags"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountRentalClosedWithNonManagedTolls"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsRentalClosedWithNonManagedTolls"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Closed Rentals Non Managed Tags");
            }
            else
            {
                oWB.Worksheets["Closed Rentals Non Managed Tags"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountDriversMarkedAsLeftWithFuelCards"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsDriversMarkedAsLeftWithFuelCards"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Left Driver With Fuel Cards");
            }
            else
            {
                oWB.Worksheets["Left Driver With Fuel Cards"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountNewVehicles"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsNewVehicles"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "New Vehicles");
            }
            else
            {
                oWB.Worksheets["New Vehicles"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountIncorrectMultipleAllocations"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsIncorrectMultipleAllocations"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Incorrect Multiple Allocations");
            }
            else
            {
                oWB.Worksheets["Incorrect Multiple Allocations"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountNewDrivers"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsNewDrivers"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "New Drivers");
            }
            else
            {
                oWB.Worksheets["New Drivers"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountDriverDetails"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsDriverDetails"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Drivers Details");
            }
            else
            {
                oWB.Worksheets["Drivers Details"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountTollsRentalsNoDriver"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsTollsRentalsNoDriver"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "MFM Rental no cust-driver Tag");
            }
            else
            {
                oWB.Worksheets["MFM Rental no cust-driver Tag"].Delete();
            }


            iRows = (int)Dts.Variables["RowCountPoliciesThatDueToExpires"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsPoliciesThatDueToExpires"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Policies Due To Expire");
            }
            else
            {
                oWB.Worksheets["Policies Due To Expire"].Delete();
            }


            iRows = (int)Dts.Variables["RowCountBocRentals"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsBocRentals"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "BOC Opened Rentals");
            }
            else
            {
                oWB.Worksheets["BOC Opened Rentals"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountWallsRentals"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsWallsRentals"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "WALLS Opened Rentals");
            }
            else
            {
                oWB.Worksheets["WALLS Opened Rentals"].Delete();
            }


            iRows = (int)Dts.Variables["RowCountVehicleFuelCardsToBeCancelled"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsFuelCardsToBeCancelled"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Fuel Card To Be Cancelled");
            }
            else
            {
                oWB.Worksheets["Fuel Card To Be Cancelled"].Delete();
            }

            iRows = (int)Dts.Variables["RowCountWriteOffRFL"].Value;

            if (iRows > 0)
            {
                Rs = (ADODB.Recordset)Dts.Variables["RsWriteOffRFL"].Value;

                SendToExcel(Rs, Rs.RecordCount, Rs.Fields.Count, oXL, oWB, "Write Off Vehicles RFL");
            }
            else
            {
                oWB.Worksheets["Write Off Vehicles RFL"].Delete();
            }
            

            oXL.DisplayAlerts = false;
            string strFileName = DateTime.Now.ToString("yyyyMMdd") + " Service Provided Report.xlsx";
            Dts.Variables["User::VarDestinationFile"].Value = strDestinationPath + strFileName;
            oWB.SaveAs(strDestinationPath + strFileName, FileFormat: Microsoft.Office.Interop.Excel.XlFileFormat.xlOpenXMLWorkbook);

            oWB.Close();
            oXL.Quit();

            oXL = null;
            oWB = null;

			Dts.TaskResult = (int)ScriptResults.Success;
		}

        private void SendToExcel(ADODB.Recordset Rs, Int32 TotalRow, Int32 TotalColumn, Microsoft.Office.Interop.Excel.Application oXL, Microsoft.Office.Interop.Excel.Workbook oWB,string sWorkSheetName)
        {
            Microsoft.Office.Interop.Excel.Worksheet oSheet;

            oSheet = oWB.Worksheets[sWorkSheetName];
            oSheet.Activate();

            oSheet.Cells.Font.Size = 10;
            oSheet.Cells.Font.Name = "Arial";

            for (Int32 n = 1; n <= TotalColumn; n++)
            {
                oSheet.Cells[1, n].Value = Rs.Fields[n - 1].Name;
                InsFunctions.FormatCellHeaders(oSheet.Range[oSheet.Cells[1, n], oSheet.Cells[1, n]], false);
                //Apply Header Merrion Template
            }

            oSheet.Range["A2"].CopyFromRecordset(Rs);

            ////apply merrion format to the details files
            if ((TotalRow > 0) && (TotalColumn > 0))
            {
                ////apply merrion format to the details files
                InsFunctions.ApplyOutandInnerBorders(oSheet.Range[oSheet.Cells[2, 1], oSheet.Cells[TotalRow + 1, TotalColumn]]);
            }

            Microsoft.Office.Interop.Excel.Range firstRow = (Microsoft.Office.Interop.Excel.Range)oSheet.Rows[1];
            firstRow.Activate();
            firstRow.Select();
            firstRow.AutoFilter(1, Type.Missing, Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, Type.Missing, true);

            //Apply more Merrion Templates 
            oSheet.Cells.Select();
            oSheet.Cells.EntireColumn.AutoFit();
            oSheet.Cells.EntireRow.AutoFit();
            oSheet.Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            oSheet.Cells.VerticalAlignment = Microsoft.Office.Interop.Excel.XlVAlign.xlVAlignCenter;
            oSheet.Range["A1"].Select();
            //Apply more Merrion Templates

            oSheet = null;
        }



--------------------------------------------------------------------------------------


#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using ADODB;
using MFMReportManagement.CommonTools;
using Microsoft.Office.Interop.Excel;
using System;
using ExcelApplication = Microsoft.Office.Interop.Excel.Application;
using ExcelWorkbook = Microsoft.Office.Interop.Excel.Workbook;
using ExcelWorksheet = Microsoft.Office.Interop.Excel.Worksheet;
#endregion

namespace ST_44992a49544f45399e975abfc2d9fce8
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        ExcelFunctions InsFunctions = new ExcelFunctions();
        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
		{
            int iRows = 0;
            Recordset Rs = new Recordset();
            Rs.CursorLocation = CursorLocationEnum.adUseClient;
            Rs.CursorType = CursorTypeEnum.adOpenStatic;
            Rs.LockType = LockTypeEnum.adLockReadOnly;

            ExcelApplication oXL = new ExcelApplication();
            ExcelWorkbook oWB = oXL.Workbooks.Add(Type.Missing);
            ExcelWorksheet oSheet;

            iRows = (int)Dts.Variables["iRecordCount"].Value;

            if (iRows > 0)
            {
                Rs = (Recordset)Dts.Variables["RsOutput"].Value;
                oSheet = CreateWorksheet(Rs, Rs.RecordCount, Rs.Fields.Count, oWB, "WL Contracts Expiring", ExcelSheets.ContractsExpiring, 1);
            }

            iRows = (int)Dts.Variables["iRecordCountMileage"].Value;

            if (iRows > 0)
            {
                Rs = (Recordset)Dts.Variables["RsOutputMileage"].Value;
                oSheet = CreateWorksheet(Rs, Rs.RecordCount, Rs.Fields.Count, oWB, "WL Mileage Excess", ExcelSheets.MileageExcess, 2);
            }

            oXL.DisplayAlerts = false;
            string sFileName = (string)Dts.Variables["VarInitialDir"].Value;
            sFileName = @sFileName + DateTime.Now.ToString("yyyyMMdd") + "-WL_Contracts_Expiring_6_Month.xlsx";
            Dts.Variables["User::FileToBeSent"].Value = sFileName;
            oWB.SaveAs(sFileName, FileFormat: XlFileFormat.xlOpenXMLWorkbook);

            oWB.Close();
            oXL.Quit();

            oXL = null;
            oWB = null;

            Dts.TaskResult = (int)ScriptResults.Success;
        }

       
        private ExcelWorksheet CreateWorksheet(Recordset Rs, int TotalRow, int TotalColumn, ExcelWorkbook oWB, string sWorkSheetName, ExcelSheets ExcelSheet, int index)
        {
            ExcelWorksheet oSheet;
            oSheet = oWB.Worksheets[index];
            oSheet.Name = sWorkSheetName;

            oSheet.Activate();
            oSheet.Cells.Font.Size = 10;
            oSheet.Cells.Font.Name = "Arial";

            oSheet.Range["1:1"].RowHeight = 50.75;

            for (int n = 1; n <= TotalColumn; n++)
            {
                oSheet.Cells[1, n].Value = Rs.Fields[n - 1].Name;
                InsFunctions.FormatCellHeaders(oSheet.Range[oSheet.Cells[1, n], oSheet.Cells[1, n]], true);
            }

            oSheet.Range["A2"].CopyFromRecordset(Data: Rs, MaxColumns: TotalColumn);

            if ((TotalRow > 0) && (TotalColumn > 0))
            {
                InsFunctions.ApplyOutandInnerBorders(oSheet.Range[oSheet.Cells[2, 1], oSheet.Cells[TotalRow + 1, TotalColumn]]);

                if (ExcelSheet == ExcelSheets.ContractsExpiring)
                {
                    InsFunctions.ApplyLongDateFormat(oSheet.Range[oSheet.Cells[2, 5], oSheet.Cells[TotalRow + 2, 5]]);
                }
            }

            Range firstRow = (Range)oSheet.Rows[1];
            firstRow.Activate();
            firstRow.Select();
            firstRow.AutoFilter(1, Type.Missing, XlAutoFilterOperator.xlAnd, Type.Missing, true);

            oSheet.Cells.Select();
            oSheet.Cells.EntireColumn.AutoFit();
            oSheet.Cells.HorizontalAlignment = XlHAlign.xlHAlignCenter;
            oSheet.Cells.VerticalAlignment = XlVAlign.xlVAlignBottom;
            oSheet.Range["A1"].Select();

            return oSheet;

        }

    }

    #region ScriptResults declaration
    /// <summary>
    /// This enum provides a convenient shorthand within the scope of this class for setting the
    /// result of the script.
    /// 
    /// This code was generated automatically.
    /// </summary>
    enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}









